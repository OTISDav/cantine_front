@page "/dashboard" 
 @using FrontendApp.Services 
 @using FrontendApp.Models 
 @inject NavigationManager Navigation
 @inject ApiService ApiService 
 @inject IJSRuntime JS 

 <h2>Bienvenue!</h2> 

 <div class="dashboard"> 
     <div class="card" @onclick="@(() => ToggleCard("menus"))"> 
         <h3>Menus du jour</h3> 
     </div> 

     <div class="card" @onclick="@(() => ToggleCard("reservations"))"> 
         <h3>Mes réservations</h3> 
     </div> 

     <div class="card" @onclick="@(() => ToggleCard("notifications"))"> 
         <h3>Notifications</h3> 
     </div> 
    @* <div class="card" @onclick="@(() => Navigation.NavigateTo("/mesannotations"))" style="cursor: pointer;">
        <h3>Mes Annotations</h3>
    </div> *@
     
 </div> 

 @if (!string.IsNullOrEmpty(openedCard)) 
 { 
     <div class="overlay"> 
         <div class="overlay-content"> 
             <button class="close-btn" @onclick="CloseOverlay">X</button> 

             @if (openedCard == "menus") 
             { 
                 <h3>Menus du jour</h3> 
                 @if (menus == null) 
                 { 
                     <p>Chargement des menus...</p> 
                 } 
                 else if (!menus.Any()) 
                 { 
                     <p>Aucun menu disponible.</p> 
                 } 
                 else 
                 { 
                     <ul> 
                         @foreach (var menu in menus) 
                         { 
                             <li>@menu.Date.ToString("dd/MM/yyyy") - @menu.PlatPrincipal - @menu.Dessert - @menu.Boisson</li> 
                         } 
                     </ul> 
                 } 
             } 
             else if (openedCard == "reservations") 
             { 
                 <h3>Mes réservations</h3> 
                 @if (reservations == null) 
                 { 
                     <p>Chargement des réservations...</p> 
                 } 
                 else if (!reservations.Any()) 
                 { 
                     <p>Aucune réservation.</p> 
                 } 
                 else 
                 { 
                     @foreach (var menu in menus) 
                     { 
                         <div class="menu-box"> 
                             <strong>@menu.Date.ToShortDateString() :</strong> @menu.PlatPrincipal - @menu.Dessert - @menu.Boisson 

                             @if (annotationsByMenu.TryGetValue(menu.Id, out var existingNote)) 
                             { 
                                 <p><strong>Note déjà donnée :</strong> @existingNote.Note/5</p> 
                                 <p><strong>Commentaire :</strong> @existingNote.Commentaire</p> 
                             } 
                             else 
                             { 
                                 <div class="note-form"> 
                                     <label>Note (1 à 5) :</label> 
                                     <InputNumber @bind-Value="annotationsInputs[menu.Id].Note" Min="1" Max="5" /> 

                                     <label>Commentaire :</label> 
                                     <InputText @bind-Value="annotationsInputs[menu.Id].Commentaire" /> 

                                     <button class="btn" @onclick="@(() => EnvoyerNote(menu.Id))">Envoyer</button> 
                                 </div> 
                             } 
                         </div> 
                     } 
                 } 
                 <a href="/reservations" class="btn">Nouvelle réservation</a> 
             } 
             else if (openedCard == "notifications") 
             { 
                 <h3>Notifications</h3> 
                 <p>Aucune notification pour le moment.</p> 
             } 
         </div> 
     </div> 
 } 

 @code { 
     private string? openedCard; 
     private List<MenuDto>? menus; 
     private List<ReservationDto>? reservations; 
     private Dictionary<int, AnnotationCreateDTO> annotationsInputs = new(); 
     private Dictionary<int, AnnotationDTO> annotationsByMenu = new(); 

     protected override async Task OnInitializedAsync() 
     { 
         menus = await ApiService.GetMenusAsync(); 
         reservations = await ApiService.GetReservationsAsync(); 
         var mesNotes = await ApiService.GetAnnotationsParUtilisateurAsync(); 

         foreach (var note in mesNotes) 
         { 
             annotationsByMenu[note.MenuId] = note; 
         } 

         foreach (var menu in menus) 
         { 
             if (!annotationsInputs.ContainsKey(menu.Id)) 
                 annotationsInputs[menu.Id] = new AnnotationCreateDTO(); 
         } 
     } 

     private void ToggleCard(string cardName) 
     { 
         openedCard = openedCard == cardName ? null : cardName; 
     } 

     private void CloseOverlay() 
     { 
         openedCard = null; 
     } 

     private async Task EnvoyerNote(int menuId) 
 { 
     var note = annotationsInputs[menuId]; 
     note.MenuId = menuId; 

     bool success = await ApiService.AjouterAnnotationAsync(note); 
     if (success) 
     { 
         // Ici tu remplaces annotationsByMenu[menuId] avec un objet AnnotationDto construit à partir de note 
         annotationsByMenu[menuId] = new AnnotationDTO 
         { 
             MenuId = note.MenuId, 
             Note = note.Note, 
             Commentaire = note.Commentaire, 
             // UserId = ??? (à ajouter si tu as cette info) 
         }; 

         annotationsInputs[menuId] = new AnnotationCreateDTO(); // reset le formulaire 
         await JS.InvokeVoidAsync("alert", "Note envoyée avec succès !"); 
         StateHasChanged(); 
     } 
     else 
     { 
         await JS.InvokeVoidAsync("alert", "Erreur lors de l'envoi de la note."); 
     } 
 } 

 }