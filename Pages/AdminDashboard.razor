@page "/admin"
@using FrontendApp.Models
@using FrontendApp.Services
@inject ApiService ApiService
@inject IJSRuntime JS

<h2 class="admin-title">üéõÔ∏è Dashboard Administrateur</h2>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isErrorMessage ? "error" : "success")">@message</div>
}

<section>
    <h3>‚ûï Cr√©er un nouveau menu</h3>
    <EditForm Model="@newMenu" OnValidSubmit="@CreateMenu" OnInvalidSubmit="@(() => ShowMessage("Veuillez remplir tous les champs obligatoires du menu.", true))">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="menuDate">Date:</label>
            <InputDate id="menuDate" @bind-Value="newMenu.Date" />
            <ValidationMessage For="@(() => newMenu.Date)" />
        </div>
        <div class="form-group">
            <label for="platPrincipal">Plat principal:</label>
            <InputText id="platPrincipal" @bind-Value="newMenu.PlatPrincipal" placeholder="Plat principal" />
            <ValidationMessage For="@(() => newMenu.PlatPrincipal)" />
        </div>
        <div class="form-group">
            <label for="dessert">Dessert:</label>
            <InputText id="dessert" @bind-Value="newMenu.Dessert" placeholder="Dessert" />
            <ValidationMessage For="@(() => newMenu.Dessert)" />
        </div>
        <div class="form-group">
            <label for="boisson">Boisson:</label>
            <InputText id="boisson" @bind-Value="newMenu.Boisson" placeholder="Boisson" />
            <ValidationMessage For="@(() => newMenu.Boisson)" />
        </div>

        <div class="form-group">
    <label for="prix">Prix:</label>
    <InputNumber id="prix" @bind-Value="newMenu.Prix" placeholder="Prix en FCFA" />
    <ValidationMessage For="@(() => newMenu.Prix)" />
</div>

<div class="form-group">
    <label for="photo">Photo (image du plat):</label>
    <InputFile OnChange="HandlePhotoUpload" accept="image/*" />
    @if (!string.IsNullOrEmpty(uploadedPhotoName))
    {
        <p>Fichier s√©lectionn√© : @uploadedPhotoName</p>
    }
</div>

        <button class="btn btn-primary" type="submit" disabled="@isLoading">Cr√©er</button>
    </EditForm>
</section>


<section>
    <h3>üìã Menus existants</h3>
    @if (isLoading && menus == null)
    {
        <p>Chargement des menus...</p>
    }
    else if (menus == null || !menus.Any())
    {
        <p>Aucun menu enregistr√©.</p>
    }
    else
    {
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Plat</th>
                    <th>Dessert</th>
                    <th>Boisson</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var menu in menus)
                {
                    <tr>
                        <td>@menu.Date.ToShortDateString()</td>
                        <td>@menu.PlatPrincipal</td>
                        <td>@menu.Dessert</td>
                        <td>@menu.Boisson</td>
                        <td>
                            <button class="btn btn-danger" @onclick="() => DeleteMenu(menu.Id)" disabled="@isLoading">Supprimer</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</section>


<section>
    <h3>üì¶ R√©servations</h3>
    @if (isLoading && reservations == null)
    {
        <p>Chargement des r√©servations...</p>
    }
    else if (reservations == null || !reservations.Any())
    {
        <p>Aucune r√©servation trouv√©e.</p>
    }
    else
    {
        <table>
            <thead>
                <tr>
                    @* <th>MenuId</th> *@
                    <th>Utilisateur</th>
                    <th>Date</th>
                    <th>Statut</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var r in reservations)
                {
                    <tr>
                        @* <td>@r.MenuId</td> *@
                        <td>@r.UserName</td>
                        <td>@r.ReservationDate.ToShortDateString()</td>
                        <td>@r.Status</td>
                        <td>
                            <button class="btn btn-warning" @onclick="() => AnnulerReservation(r.Id)" disabled="@isLoading">Annuler</button>
                            <button class="btn btn-success" @onclick="() => MarquerCommePret(r.Id)" disabled="@isLoading">Pr√™te</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</section>


<section>
    <h3>üìù Notes des menus</h3>
    @if (isLoading && annotations == null)
    {
        <p>Chargement des notes...</p>
    }
    else if (annotations == null || !annotations.Any())
    {
        <p>Aucune note disponible.</p>
    }
    else
    {
        <table>
            <thead>
                <tr>
                    <th>Menu</th>
                    <th>Note</th>
                    <th>Commentaire</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in annotations)
                {
                    <tr>
                        <td>@a.MenuId</td>
                        <td>@a.Note</td>
                        <td>@a.Commentaire</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</section>

@code {
    private List<MenuDto>? menus;
    private MenuDto newMenu = new() { Date = DateTime.Now }; // Initialise la date √† aujourd'hui
    private List<ReservationDto>? reservations;
    private List<AnnotationDto>? annotations;
    private string? message;
    private bool isErrorMessage;
    private bool isLoading = true; // Indique si une op√©ration de chargement/traitement est en cours
    IBrowserFile? uploadedPhoto;
    string? uploadedPhotoName;


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            menus = await ApiService.GetMenusAsync();
            reservations = await ApiService.GetReservationsAsync();
            annotations = await ApiService.GetAnnotationsAsync();
        }
        catch (Exception ex)
        {
            await ShowMessage($"Erreur lors du chargement des donn√©es: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ShowMessage(string msg, bool isError = false)
    {
        message = msg;
        isErrorMessage = isError;
        StateHasChanged(); // S'assure que le message s'affiche imm√©diatement
        await Task.Delay(5000); // Le message dispara√Ætra apr√®s 5 secondes
        message = null;
        StateHasChanged(); // Retire le message de l'interface
    }

    // Cr√©er un menu
    private async Task CreateMenu()
    {
        isLoading = true;
        try
        {
            var created = await ApiService.CreateMenuAsync(newMenu);
            if (created)
            {
                await ShowMessage("Menu cr√©√© avec succ√®s.");
                await LoadData(); // Recharger toutes les donn√©es apr√®s cr√©ation
                newMenu = new() { Date = DateTime.Now }; // R√©initialiser le formulaire
            }
            else
            {
                await ShowMessage("Erreur lors de la cr√©ation du menu. V√©rifiez les donn√©es.", true);
            }
        }
        catch (Exception ex)
        {
            await ShowMessage($"Une erreur inattendue est survenue lors de la cr√©ation du menu: {ex.Message}", true);
        }
        finally
        {
            isLoading = false;
        }
    }
    // G√©rer le t√©l√©chargement de la photo
    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
{
    uploadedPhoto = e.File;
    uploadedPhotoName = uploadedPhoto.Name;

    // Si tu veux l'uploader vers l'API maintenant, tu peux faire √ßa ici :
    // var result = await ApiService.UploadPhotoAsync(uploadedPhoto);
    // if (result != null) {
    //     newMenu.PhotoUrl = result.Url;
    // }
}


    // Supprimer un menu
    private async Task DeleteMenu(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "√ätes-vous s√ªr de vouloir supprimer ce menu ? Cette action est irr√©versible.");
        if (confirmed)
        {
            isLoading = true;
            try
            {
                var result = await ApiService.DeleteMenuAsync(id);
                if (result)
                {
                    await ShowMessage("Menu supprim√© avec succ√®s.");
                    await LoadData(); // Recharger les menus apr√®s suppression
                }
                else
                {
                    await ShowMessage("√âchec de la suppression du menu.", true);
                }
            }
            catch (Exception ex)
            {
                await ShowMessage($"Une erreur inattendue est survenue lors de la suppression du menu: {ex.Message}", true);
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    // Annuler une r√©servation
// Dans Admin.razor
    private async Task AnnulerReservation(int reservationId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"√ätes-vous s√ªr de vouloir annuler la r√©servation #{reservationId} ?");
        if (confirmed)
        {
            isLoading = true;
            try
            {
                // C'est ici que la correction s'applique :
                var result = await ApiService.DeleteReservationAsync(reservationId); // <-- Supprimez .ToString()
                if (result)
                {
                    await ShowMessage("R√©servation annul√©e avec succ√®s.");
                    await LoadData();
                }
                else
                {
                    await ShowMessage("Erreur lors de l'annulation de la r√©servation.", true);
                }
            }
            catch (Exception ex)
            {
                await ShowMessage($"Une erreur inattendue est survenue lors de l'annulation de la r√©servation: {ex.Message}", true);
            }
            finally
            {
                isLoading = false;
            }
        }
    }

    // Marquer une r√©servation comme pr√™te
    private async Task MarquerCommePret(int reservationId)
    {
        // Cette fonction est une simulation. En r√©alit√©, on voudra appeler une API.
        // Exemple d'appel API hypoth√©tique:
        // var result = await ApiService.UpdateReservationStatusAsync(reservationId, "Pret");
        // if (result) {
        //     await ShowMessage($"La r√©servation #{reservationId} a √©t√© marqu√©e comme pr√™te.");
        //     await LoadData();
        // } else {
        //     await ShowMessage("Erreur lors de la mise √† jour du statut de la r√©servation.", true);
        // }

        await ShowMessage($"La r√©servation #{reservationId} est marqu√©e comme pr√™te (simulation).");
        // Recharger les donn√©es si le statut est r√©ellement mis √† jour via une API
        // await LoadData();
    }
}