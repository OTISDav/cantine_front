@page "/menus"
@using FrontendApp.Models
@using FrontendApp.Services
@inject ApiService ApiService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Nos Menus</h3>

@if (menus == null)
{
    <p>Chargement...</p>
}
else if (!menus.Any())
{
    <p>Aucun menu disponible pour le moment.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Photo</th>
                <th>Plat principal</th>
                <th>Dessert</th>
                <th>Boisson</th>
                <th>Prix</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var menu in menus)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(menu.PhotoUrl))
                        {
                            <img src="https://localhost:7001/@menu.PhotoUrl" style="width: 100px; height: auto; border-radius: 5px;" />
                        }
                        else
                        {
                            <span>Pas de photo</span>
                        }
                    </td>
                    <td>@menu.PlatPrincipal</td>
                    <td>@menu.Dessert</td>
                    <td>@menu.Boisson</td>
                    <td>@menu.Prix FCFA</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => Reserver(menu.Id)">Réserver</button>
                    </td>
                </tr>

                <tr>
                    <td colspan="6">
                        @if (annotationsExistantes.ContainsKey(menu.Id))
                        {
                            var a = annotationsExistantes[menu.Id];
                            <div style="margin-left: 20px;">
                                <strong>Note donnée :</strong> @a.Note/5<br />
                                <strong>Commentaire :</strong> @a.Commentaire
                            </div>
                        }
                        else
                        {
                            <div style="margin-left: 20px;">
                                <label>Note (1 à 5) :</label>
                                <InputNumber @bind-Value="nouvellesAnnotations[menu.Id].Note" Min="1" Max="5" class="form-control" />

                                <label>Commentaire :</label>
                                <InputText @bind-Value="nouvellesAnnotations[menu.Id].Commentaire" class="form-control" />

                                <button class="btn btn-success mt-1" @onclick="() => EnvoyerAnnotation(menu.Id)">Envoyer</button>
                            </div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (!string.IsNullOrEmpty(message))
{
    <p style="color: green;">@message</p>
}

@code {
    private List<MenuDto>? menus;
    private List<AnnotationDto>? toutesAnnotations;
    private Dictionary<int, AnnotationDto> annotationsExistantes = new();
    private Dictionary<int, AnnotationDto> nouvellesAnnotations = new();
    private string? userId;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        menus = await ApiService.GetMenusAsync();
        toutesAnnotations = await ApiService.GetAnnotationsAsync();
        userId = await JS.InvokeAsync<string>("localStorage.getItem", "user_id");

        if (userId != null)
        {
            foreach (var ann in toutesAnnotations)
            {
                if (ann.UserId == userId && !annotationsExistantes.ContainsKey(ann.MenuId))
                {
                    annotationsExistantes[ann.MenuId] = ann;
                }
            }
        }

        if (menus != null)
        {
            foreach (var menu in menus)
            {
                if (!nouvellesAnnotations.ContainsKey(menu.Id))
                {
                    nouvellesAnnotations[menu.Id] = new AnnotationDto();
                }
            }
        }
    }

    private async Task Reserver(int menuId)
    {
        var reservationToCreate = new ReservationCreateDTO
        {
            MenuId = menuId,
            ReservationDate = DateTime.Now,
            UserId = userId ?? "default-user-id"
        };

        var created = await ApiService.CreateReservationAsync(reservationToCreate);

        if (created != null)
        {
            message = "Réservation effectuée avec succès.";
        }
        else
        {
            message = "Échec de la réservation.";
        }
    }

    private async Task EnvoyerAnnotation(int menuId)
    {
        if (nouvellesAnnotations.TryGetValue(menuId, out var annotation) && !string.IsNullOrWhiteSpace(userId))
        {
            annotation.MenuId = menuId;
            annotation.UserId = userId;

            var success = await ApiService.AjouterAnnotationAsync(annotation);

            if (success)
            {
                annotationsExistantes[menuId] = annotation;
                nouvellesAnnotations[menuId] = new AnnotationDto();
                message = "Note envoyée avec succès.";
            }
            else
            {
                message = "Erreur lors de l'envoi de la note.";
            }
        }
    }
}
