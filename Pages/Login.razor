@* connexion avec admin *@

@* Email : ctbfadmin@g6.com

Mot de passe : Admin2003 *@



@page "/login"
@using FrontendApp.Services
@using FrontendApp.Models
@inject ApiService ApiService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Connexion</h3>

<div class="form-container">
    <input @bind="Email" placeholder="Email" type="email" />
    <input @bind="Password" placeholder="Mot de passe" type="password" />

    <!-- ✅ Ajout d'une checkbox admin -->
    <label>
        <input type="checkbox" @bind="IsAdmin" />
        Je suis un administrateur
    </label>

    <button class="btn btn-primary" @onclick="LoginUser">Se connecter</button>
    <button class="btn btn-link" @onclick="GoToRegister">Créer un compte</button>

    @if (!string.IsNullOrEmpty(Message))
    {
        <p class="error">@Message</p>
    }
</div>

@code {
    private string Email = "";
    private string Password = "";
    private bool IsAdmin = false;
    private string Message = "";

private async Task LoginUser()
{
    var user = new UserLoginDto
    {
        Email = Email,
        Password = Password
    };

    var result = await ApiService.LoginAsync(user);
    if (result != null && !string.IsNullOrEmpty(result.Token))
    {
        // ✅ Vérification stricte pour admin
        if (IsAdmin)
        {
            if (Email == "ctbfadmin@g6.com" && Password == "Admin2003")
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "token", result.Token);
                await JS.InvokeVoidAsync("localStorage.setItem", "user_id", result.UserId);
                await JS.InvokeVoidAsync("localStorage.setItem", "role", "admin");

                Navigation.NavigateTo("/admin");
            }
            else
            {
                Message = "Accès refusé. Identifiants administrateur invalides.";
                return;
            }
        }
        else
        {
            // ✅ Connexion normale pour utilisateur
            await JS.InvokeVoidAsync("localStorage.setItem", "token", result.Token);
            await JS.InvokeVoidAsync("localStorage.setItem", "user_id", result.UserId);
            await JS.InvokeVoidAsync("localStorage.setItem", "role", "user");

            Navigation.NavigateTo("/dashboard");
        }
    }
    else
    {
        Message = "Email ou mot de passe incorrect.";
    }
}


    private void GoToRegister()
    {
        Navigation.NavigateTo("/register");
    }
}

<style>
    .form-container {
        max-width: 400px;
        margin: 100px auto;
        background: #f8f9fa;
        padding: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    input[type="email"],
    input[type="password"] {
        padding: 10px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 16px;
        width: 100%;
        box-sizing: border-box;
    }

    input[type="checkbox"] {
        margin-right: 6px;
    }

    .btn {
        padding: 10px;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        border: none;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        margin-top: 10px;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-link {
        background: none;
        color: #007bff;
        text-decoration: underline;
        margin-top: 5px;
    }

    .btn-link:hover {
        color: #0056b3;
    }

    .error {
        color: red;
        text-align: center;
        margin-top: 10px;
    }
</style>



